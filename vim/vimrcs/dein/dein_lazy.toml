[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction
'''
hook_source = '''
  if has('nvim')
    let height = &lines / 3
    let width = float2nr(&columns - (&columns * 2 / 10))
    let col = float2nr((&columns - width) / 2)

    call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': width,
      \ 'winheight': height,
      \ 'wincol': col,
      \ 'winrow': 1,
      \ 'prompt': "$ ",
      \ })
  endif
'''

[[plugins]]
repo = 'liuchengxu/vim-clap'
if = '''! has('nvim')'''
build = ':Clap install-binary'
hook_add = '''
  let g:clap_theme = 'material_design_dark'
  let g:clap_current_selection_sign = {
    \ 'text': "\uF0A4",
    \ 'texthl': "WarningMsg",
    \ 'linehl': "ClapCurrentSelection"
    \ }

  let height = &lines / 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)
  let g:clap_layout = {
    \ 'relative': 'editor',
    \ }
  let g:clap_open_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

  " open nerdtree if no specified arguments
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | :Clap files --hidden | endif

  " custom commands likes `fzf.vim`
  command! Files Clap files --hidden
  command! Colors Clap colors
  command! Grep Clap grep
  command! Git Clap GFiles
  command! Buffers Clap buffers

  nnoremap <silent> zf :Clap files --hidden<CR>
  nnoremap <silent> zb :Clap buffers<CR>
  nnoremap <silent> zl :Clap blines<CR>
  nnoremap <silent> zg :Clap git_diff_files<CR>
  nnoremap <silent> zr :Clap grep<CR>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
if = '''has('nvim')'''
hook_add = '''
  nnoremap <silent> zf :Files<CR>
  nnoremap <silent> zg :GFiles?<CR>
  nnoremap <silent> zh :History<CR>
  nnoremap <silent> zb :Buffers<CR>

  " customize to open in horizontal
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit' }

  if has('nvim')
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }

    function! FloatingFZF()
      let buf = nvim_create_buf(v:false, v:true)
      call setbufvar(buf, '&signcolumn', 'no')

      let height = &lines / 3
      let width = float2nr(&columns - (&columns * 2 / 10))
      let col = float2nr((&columns - width) / 2)

      let opts = {
            \ 'relative': 'editor',
            \ 'row': 1,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height
            \ }

      call nvim_open_win(buf, v:true, opts)
    endfunction
  endif
'''

[[plugins]]
repo = '/usr/local/opt/fzf'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

[[plugins]]
repo = 'scalameta/metals'
on_ft = 'scala'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'ianks/vim-tsx'
on_ft = 'typescript'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'
hook_add = '''
  nnoremap <silent> <space>@ :Tabularize /\|<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
on_ft = [
  'vim',
  'eruby',
  'markdown',
  'yaml',
  'haskell',
  'lhs',
  'hs',
  'scala',
  'sbt',
  'rust',
  'purescript',
  'elm',
  'javascript',
  'typescript'
]
merged = 0
rev = 'release'
hook_add = '''
  set hidden
  set updatetime=300
  set shortmess+=c
  set signcolumn=yes

  nmap <silent> [e <Plug>(coc-diagnostic-prev)
  nmap <silent> ]e <Plug>(coc-diagnostic-next)

  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  nmap <leader>ac <Plug>(coc-codeaction)

  nnoremap <silent> F :call CocAction('format')<CR>
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h ' . expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
'''

[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = 'elm'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'
hook_add = '''
  let g:user_emmet_leader_key='<C-Y>'
'''

[[plugins]]
repo = 'skanehira/preview-markdown.vim'
on_ft = 'markdown'
hook_add = '''
  let g:preview_markdown_vertical = 1
  let g:preview_markdown_auto_update = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'md' ]

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'md' ]
