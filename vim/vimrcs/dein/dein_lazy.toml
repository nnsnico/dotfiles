# ------------------------------ language plugins ------------------------------
[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

[[plugins]]
repo = 'scalameta/metals'
on_ft = 'scala'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'ianks/vim-tsx'
on_ft = 'typescript'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
on_ft = [
  'elm',
  'eruby',
  'haskell',
  'hs',
  'javascript',
  'lhs',
  'markdown',
  'purescript',
  'python',
  'rust',
  'sbt',
  'scala',
  'typescript',
  'vim',
  'yaml'
]
merged = 0
rev = 'release'
hook_add = '''
  set updatetime=300
  set shortmess+=c
  set signcolumn=yes

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h ' . expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " scrollable in popup menu
  " @see https://vi.stackexchange.com/questions/21924/how-can-i-hide-and-scroll-popup-window-in-coc-nvim-in-vim
  if has('nvim')
    nnoremap <silent><expr> <C-j> coc#util#has_float() ? coc#util#float_scroll(1) : "\<C-j>"
    nnoremap <silent><expr> <C-k> coc#util#has_float() ? coc#util#float_scroll(0) : "\<C-k>"
  else
    nnoremap <silent><expr> <C-j> <SID>scroll_cursor_popup(1) ? "\<Esc>" : "\<C-d>"
    nnoremap <silent><expr> <C-k> <SID>scroll_cursor_popup(0) ? "\<Esc>" : "\<C-u>"

    function! s:find_cursor_popup(...) abort
      let radius = get(a:000, 0, 2)
      let srow   = screenrow()
      let scol   = screencol()

      " it's necessary to test entire rect, as some popup might be quite small
      for r in range(srow - radius, srow + radius)
        for c in range(scol - radius, scol + radius)
          let winid = popup_locate(r, c)
          if winid != 0
            return winid
          endif
        endfor
      endfor

      return 0
    endfunction

    function! s:scroll_cursor_popup(down) abort
      let winid = s:find_cursor_popup()
      if winid == 0
        return 0
      endif

      let pp = popup_getpos(winid)
      call popup_setoptions( winid,
            \ {'firstline' : pp.firstline + ( a:down ? 1 : -1 ) } )

      return 1
    endfunction
  endif

  nmap     <silent>       [e         <Plug>(coc-diagnostic-prev)
  nmap     <silent>       ]e         <Plug>(coc-diagnostic-next)
  nmap     <silent>       <leader>ac <Plug>(coc-codeaction)
  nmap     <silent>       gd         <Plug>(coc-definition)
  nmap     <silent>       gy         <Plug>(coc-type-definition)
  nmap     <silent>       gi         <Plug>(coc-implementation)
  nmap     <silent>       gr         <Plug>(coc-references)
  nnoremap <silent>       K          :call <SID>show_documentation()<CR>
  nnoremap <silent>       <Space>f   :call CocAction('format')<CR>
  nnoremap <silent>       <Space>a   :<C-u>CocList diagnostics<CR>
  nnoremap <silent>       <Space>o   :<C-u>CocList outline<CR>
  nnoremap <silent>       <Space>s   :<C-u>CocList -I symbols<CR>
  nnoremap <silent>       <Space>j   :<C-u>CocNext<CR>
  nnoremap <silent>       <Space>k   :<C-u>CocPrev<CR>
  nnoremap <silent>       <Space>p   :<C-u>CocListResume<CR>
  inoremap <silent><expr> <CR>       pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
'''

[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = 'elm'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'
hook_add = '''
  let g:user_emmet_leader_key = '<C-y>'
'''

[[plugins]]
repo = 'zinit-zsh/zinit-vim-syntax'
on_ft = 'zsh'

# ------------------------------ markdown utility ------------------------------

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled    = 1
  let g:vim_markdown_conceal             = 0
  let g:vim_markdown_conceal_code_blocks = 0
'''

[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'
hook_add = '''
  nnoremap <silent><Space>@ :Tabularize /\|<CR>
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'md' ]

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'md' ]

[[plugins]]
repo = 'skanehira/preview-markdown.vim'
on_ft = 'markdown'
hook_add = '''
  let g:preview_markdown_vertical    = 1
  let g:preview_markdown_auto_update = 1
'''
