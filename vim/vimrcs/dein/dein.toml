# ------------------------------- basic plugins -------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token = system('cat ' . expand('~/dotfiles/yabai_yatsu.txt') . " | awk -F ': ' '/github_api/ {print $2}'")

  command! -nargs=0 AutoRemovePackages call s:auto_remove_packges()
  function! s:auto_remove_packges() abort
    let unused_packages = dein#check_clean()
    if empty(unused_packages)
      echohl WarningMsg
      echom "No packages to be removed."
      echohl None
      return
    endif

    call map(unused_packages, "delete(v:val, 'rf')")
    echohl Green
    echom "Success to remove all packages!"
    echohl None
  endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
lazy = 1

[[plugins]]
repo = 'Shougo/vimproc.vim'
lazy = 1
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
if = '''has('nvim')'''

[[plugins]]
repo = 'vim-denops/denops.vim'
lazy = 1

# -------------------------------- fuzzy finder --------------------------------

[[plugins]]
repo = 'liuchengxu/vim-clap'
build = ':Clap install-binary'
hook_add = '''
  let g:clap_theme = 'material_design_dark'
  let g:clap_current_selection_sign = {
    \ 'text': "\uF0A4",
    \ 'texthl': "WarningMsg",
    \ 'linehl': "ClapCurrentSelection"
    \ }

  let g:clap_enable_icon = 1

  let height = &lines / 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)
  let g:clap_layout = {
    \ 'relative': 'editor',
    \ }
  let g:clap_open_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

  " custom commands likes `fzf.vim`
  nnoremap <silent> <Plug>ClapFiles      :<C-u>Clap files --hidden<CR>
  nnoremap <silent> <Plug>ClapBuffers    :<C-u>Clap buffers<CR>
  nnoremap <silent> <Plug>ClapBLine      :<C-u>Clap blines<CR>
  nnoremap <silent> <Plug>ClapGFiles     :<C-u>Clap git_diff_files<CR>
  nnoremap <silent> <Plug>ClapGrep       :<C-u>Clap grep<CR>
  nnoremap <silent> <Plug>ClapGrepWord   :<C-u>Clap grep ++query=<cword><CR>
  vnoremap <silent> <Plug>ClapGrepSelect :<C-u>Clap grep ++query=@visual<CR>
  nnoremap <silent> <Plug>ClapWindows    :<C-u>Clap windows<CR>
  nnoremap <silent> <Plug>ClapColors     :<C-u>Clap colors<CR>
  nnoremap <silent> <Plug>ClapCommand    :<C-u>Clap command<CR>
  nnoremap <silent> <Plug>ClapHelp       :<C-u>Clap help_tags<CR>

  nmap <silent> zf         <Plug>ClapFiles
  nmap <silent> zb         <Plug>ClapBuffers
  nmap <silent> zl         <Plug>ClapBLine
  nmap <silent> zg         <Plug>ClapGFiles
  nmap <silent> zr         <Plug>ClapGrep
  nmap <silent> zv         <Plug>ClapGrepWord
  vmap <silent> zv         <Plug>ClapGrepSelect
  nmap <silent> zw         <Plug>ClapWindows
  nmap <silent> zc         <Plug>ClapColors
  nmap <silent> <Leader>zc <Plug>ClapCommand
  nmap <silent> zh         <Plug>ClapHelp
'''

# ------------------------------- filer plugins --------------------------------

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
if = '''has('nvim')'''
depends = ["nvim-web-devicons"]
hook_add = '''
  nnoremap <expr> <silent><C-t> @% == "" ? ":<C-u>NvimTreeOpen<CR>" : ":<C-u>NvimTreeFindFile<CR>"
'''
hook_source = '''
lua <<EOF
  local tree_callback = require'nvim-tree.config'.nvim_tree_callback
  require'nvim-tree'.setup {
    view = {
      mappings = {
        custom_only = true,
        list = {
          { key = {"<CR>", "o"}, cb = tree_callback("edit") },
          { key = "<C-t>",       cb = tree_callback("close") },
          { key = "x",           cb = tree_callback("close_node") },
          { key = "K",           cb = tree_callback("first_sibling") },
          { key = "J",           cb = tree_callback("last_sibling") },
          { key = "I",           cb = tree_callback("toggle_ignored") },
          { key = "H",           cb = tree_callback("toggle_dotfiles") },
          { key = "R",           cb = tree_callback("refresh") },
          { key = "i",           cb = tree_callback("split") },
          { key = "s",           cb = tree_callback("vsplit") },
          { key = "go",          cb = tree_callback("preview") },
          { key = "[c",          cb = tree_callback("prev_git_item") },
          { key = "]c",          cb = tree_callback("next_git_item") },
          { key = "M",           cb = tree_callback("create") },
          { key = "r",           cb = tree_callback("rename") },
          { key = "cc",          cb = tree_callback("cut") },
          { key = "yy",          cb = tree_callback("copy") },
          { key = "YY",          cb = tree_callback("copy_path") },
          { key = "Yy",          cb = tree_callback("copy_absolute_path") },
          { key = "dd",          cb = tree_callback("remove") },
          { key = "p",           cb = tree_callback("paste") },
          { key = "g?",          cb = tree_callback("toggle_help") },
        }
      }
    }
  }
EOF
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
lazy = 1

# ---------------------------- manipulation utility ----------------------------

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1

  " disable in nerdtree
  let g:rainbow_conf = {
    \ 'separately': {
    \   'nerdtree': 0
    \ }
  \ }
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
  call repeat#set("<Space><CR>", v:count1)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'mg979/vim-visual-multi'

[[plugins]]
repo = 'pechorin/any-jump.vim'
hook_add = '''
  let g:any_jump_list_numbers     = 1
  let g:any_jump_grouping_enabled = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
lazy = 1
on_map = '<Plug>(EasyAlign)'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
rev = 'v1'
if = '''has('nvim')'''
hook_source = '''
lua <<EOF
  require'hop'.setup { keys = 'etovxqpdygfblzhckisuran' }
  vim.api.nvim_set_keymap('n', 'f',         "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, current_line_only = true })<cr>",                         {})
  vim.api.nvim_set_keymap('n', 'F',         "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, current_line_only = true })<cr>",                        {})
  vim.api.nvim_set_keymap('o', 'f',         "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, current_line_only = true, inclusive_jump = true })<cr>",  {})
  vim.api.nvim_set_keymap('o', 'F',         "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, current_line_only = true, inclusive_jump = true })<cr>", {})
  vim.api.nvim_set_keymap('',  't',         "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.AFTER_CURSOR, current_line_only = true })<cr>",                         {})
  vim.api.nvim_set_keymap('',  'T',         "<cmd>lua require'hop'.hint_char1({ direction = require'hop.hint'.HintDirection.BEFORE_CURSOR, current_line_only = true })<cr>",                        {})
  vim.api.nvim_set_keymap('n', '<Leader>s', "<cmd>lua require'hop'.hint_char1()<cr>",                                                                                                                   {})
EOF
'''

[[plugins]]
repo = 'psliwka/vim-smoothie'

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ["denops.vim"]
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)

  function! s:skkeleton_init() abort
    call skkeleton#config({
          \   'eggLikeNewline': v:true,
          \   'globalJisyo': expand('~/jisyo/SKK-JISYO.L'),
          \   'registerConvertResult': v:true,
          \ })
    call skkeleton#register_kanatable('rom', {
          \   "z\<Space>": ["\u3000", ''],
          \ })
  endfunction

  augroup skkeleton-coc
    autocmd!
    autocmd User skkeleton-initialize-pre call s:skkeleton_init()
    autocmd User skkeleton-enable-pre let b:coc_suggest_disable = v:true
    autocmd User skkeleton-disable-pre let b:coc_suggest_disable = v:false
  augroup END
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
lazy = 1

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
lazy = 1

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ["denops.vim", "ddc-matcher_head",  "ddc-sorter_rank"]
hook_source = '''
  call ddc#custom#patch_global('sources', ['skkeleton'])
  call ddc#custom#patch_global('sourceOptions', {
        \   '_': {
        \     'matchers': ['matcher_head'],
        \     'sorters': ['sorter_rank'],
        \   },
        \   'skkeleton': {
        \     'mark': 'skkeleton',
        \     'matchers': ['skkeleton'],
        \     'sorters': [],
        \     'minAutoCompleteLength': 2,
        \   },
        \ })
  call ddc#enable()
'''

# ------------------------------- visual utility -------------------------------

[[plugins]]
repo = "rebelot/heirline.nvim"
depends = ["nvim-web-devicons"]
hook_source = '''
lua <<EOF
  local conditions = require('heirline.conditions')
  local utils = require('heirline.utils')
  -- import to dart theme of fancomi.vim
  local general_colors = {
    fg          = '#C8C6B7',
    bg          = '#00122C',
    red         = '#C20706',
    red_light   = '#C23F3E',
    green       = '#80AA31',
    green_light = '#8DAA55',
    orange      = '#DB8B33',
    yellow      = '#D9A45A',
    blue        = '#4169AE',
    sky_blue    = '#4DC8FF',
    cyan        = '#41AEB4',
    gray        = '#434C59',
    black       = '#00173A',
    none        = 'NONE',
  }

  local colors = {
    diag_warn = {
      fg = general_colors.black,
      bg = utils.get_highlight("DiagnosticWarn").fg,
    },

    diag_err = {
      fg = general_colors.black,
      bg = utils.get_highlight("DiagnosticError").fg,
    },

    git = {
      del    = "#801D75",
      add    = "#9BD330",
      change = "#3555D4",
    },

    skk = {
      fg = general_colors.fg,
      bg = general_colors.gray,
    },

    filetype = {
      fg = general_colors.bg,
      bg = general_colors.sky_blue,
    },

    fileencode = {
      fg = general_colors.black,
      bg = general_colors.cyan,
    },

    linestatus = {
      fg = general_colors.black,
      bg = general_colors.blue,
    },
  }

  -- ViMode

  local ViMode = {
    init = function(self)
      self.mode = vim.fn.mode(1)
    end,
    static = {
      mode_names = {
        n        = "NORMAL",
        no       = "NORMAL",
        nov      = "NORMAL",
        noV      = "NORMAL",
        ["no"] = "NORMAL",
        niI      = "NORMAL",
        niR      = "NORMAL",
        niV      = "NORMAL",
        nt       = "TERMINAL",
        v        = "VISUAL",
        vs       = "VISUAL",
        V        = "V-LINE",
        Vs       = "V-LINE",
        [""]   = "V-BLOCK",
        ["s"]  = "V-BLOCK",
        s        = "SELECT",
        S        = "SELECT",
        [""]   = "SELECT",
        i        = "INSERT",
        ic       = "INSERT",
        ix       = "INSERT",
        R        = "REPLACE",
        Rc       = "REPLACE",
        Rx       = "REPLACE",
        Rv       = "V-REPLACE",
        Rvc      = "V-REPLACE",
        Rvx      = "V-REPLACE",
        c        = "COMMAND",
        cv       = "EX",
        r        = "...",
        rm       = "MORE",
        ["r?"]   = "?",
        ["!"]    = "!",
        t        = "TERMINAL ACTIVE",
      },
      mode_colors = {
        n      = general_colors.blue ,
        i      = general_colors.green,
        v      = general_colors.yellow,
        V      = general_colors.yellow,
        [""] = general_colors.yellow,
        c      = general_colors.orange,
        s      = general_colors.green_light,
        S      = general_colors.green_light,
        [""] = general_colors.green_light,
        R      = general_colors.red_light,
        r      = general_colors.red_light,
        ["!"]  = general_colors.red,
        t      = general_colors.red,
      }
    },
    provider = function(self)
      return "  %2("..self.mode_names[self.mode].."%) "
    end,
    hl = function(self)
      local mode = self.mode:sub(1, 1)
      self.bg_color = self.mode_colors[mode]
      return {
        fg = general_colors.black,
        bg = self.mode_colors[mode],
        style = "bold",
      }
    end,
  }

  ViMode = utils.insert(ViMode,
    {
      provider = ' ',
      hl = function(self)
        return { fg = self.bg_color, bg = colors.skk.bg }
      end,
    }
  )

  -- SkkStatus

  SkkStatus = {
    init = function(self)
      local mode = vim.fn['skkeleton#mode']()
      if mode == '' then
        self.mode = 'A'
      elseif mode == 'kata' then
        self.mode = 'ア'
      elseif mode == 'hira' then
        self.mode = 'あ'
      else
        self.mode = ''
      end
    end,
    provider = function(self)
      return " "..self.mode.." "
    end,
    hl = function()
      return {
        fg = colors.skk.fg,
        bg = colors.skk.bg,
      }
    end,
  }

  SkkStatus = utils.insert(SkkStatus,
    {
      provider = ' ',
      hl = function()
        return { fg = colors.skk.bg, bg = utils.get_highlight("StatusLine").bg }
      end,
    }
  )

  -- FileType

  local FileType = {
    condition = function(self)
      self.ft = vim.bo.filetype
      return self.ft ~= ""
    end,
    provider = function(self)
      return " "..self.ft.." "
    end,
    hl = {
      fg = colors.filetype.fg,
      bg = colors.filetype.bg,
    }
  }

  FileType = utils.insert(
    {
      provider = ' ',
      hl = {
        fg = colors.filetype.bg,
        bg = colors.diag_err.bg,
      },
    },
    FileType
  )

  -- File encode type

  local FileEncodeType = {
    init = function(self)
      self.fenc = vim.bo.fileencoding
      self.ff = vim.bo.fileformat
    end,
    provider = function(self)
      return " "..self.fenc.."["..self.ff.."]".." "
    end,
    hl = {
      fg = colors.fileencode.fg,
      bg = colors.fileencode.bg,
    },
  }

  FileEncodeType = utils.insert(
    {
      provider = ' ',
      hl = {
        fg = colors.fileencode.bg,
        bg = colors.filetype.bg,
      },
    },
    FileEncodeType
  )

  -- Line status

  local LineStatus = {
    static = {
      sbar = { '▁', '▂', '▃', '▄', '▅', '▆', '▇', '█' }
    },
    provider = function(self)
      local curr_line = vim.api.nvim_win_get_cursor(0)[1]
      local lines = vim.api.nvim_buf_line_count(0)
      local percentage = math.floor((curr_line / lines) * 100)
      local i = math.floor(curr_line / lines * (#self.sbar - 1)) + 1
      return " "..percentage.."%%".." "..string.rep(self.sbar[i], 2).." "
    end,
    hl = {
      fg = colors.linestatus.fg,
      bg = colors.linestatus.bg,
    }
  }

  LineStatus = {
    {
      provider = ' ',
      hl = {
        fg = colors.linestatus.bg,
        bg = colors.fileencode.bg,
      }
    },
    LineStatus
  }

  -- Diagnostic

  -- Warning status

  local CocDiagnosticWarn = {
    condition = function(self)
      self.info = vim.b.coc_diagnostic_info
      return self.info ~= nil and self.info.warning > 0
    end,
    init = function(self)
      local line = self.info.lnums[2]
      self.status = self.info.warning.."[".."L"..line.."]"
    end,
    provider = function(self)
      return " ".." "..self.status.." "
    end,
    hl = {
      fg = colors.diag_warn.fg,
      bg = colors.diag_warn.bg,
    }
  }

  CocDiagnosticWarn = utils.insert(
    {
      provider = ' ',
      hl = {
        fg = colors.diag_warn.bg,
        bg = utils.get_highlight("StatusLine").bg,
      }
    },
    CocDiagnosticWarn
  )

  -- Error status

  local CocDiagnosticError = {
    condition = function(self)
      self.info = vim.b.coc_diagnostic_info
      return self.info ~= nil and self.info.error > 0
    end,
    init = function(self)
      local line = self.info.lnums[1]
      self.status = self.info.error.."[".."L"..line.."]"
    end,
    provider = function(self)
      return " ".." "..self.status.." "
    end,
    hl = {
      fg = colors.diag_err.fg,
      bg = colors.diag_err.bg,
    }
  }

  CocDiagnosticError = {
    {
      provider = ' ',
      hl = {
        fg = colors.diag_err.bg,
        bg = colors.diag_warn.bg,
      }
    },
    CocDiagnosticError
  }

  -- File name

  local FileNameBlock = {
    init = function(self)
      self.filename = vim.api.nvim_buf_get_name(0)
    end,
  }

  local FileIcon = {
    init = function(self)
      local filename = self.filename
      local extension = vim.fn.fnamemodify(filename, ":e")
      self.icon, self.icon_color = require("nvim-web-devicons").get_icon_color(filename, extension, { default = true })
    end,
    provider = function(self)
      return self.icon and (self.icon.." ")
    end,
    hl = function(self)
      return { fg = self.icon_color }
    end,
  }

  local FileName = {
      provider = function(self)
          local filename = vim.fn.fnamemodify(self.filename, ":.")
          if filename == "" then
            return "[No Name]"
          end
          if not conditions.width_percent_below(#filename, 0.25) then
            filename = vim.fn.pathshorten(filename)
          end
          return filename
      end,
      hl = { fg = general_colors.fg },
  }

  local FileNameModifier = {
      hl = function()
          if vim.bo.modified then
              return { fg = general_colors.cyan, style = 'bold', force = true }
          end
      end,
  }

  FileNameBlock = utils.insert(FileNameBlock,
    FileIcon,
    utils.insert(FileNameModifier, FileName),
    { provider = '%<' }
  )

  -- Main

  local DefaultStatusline = {
    ViMode,
    SkkStatus,
    { provider = "%=" },
    FileNameBlock,
    { provider = "%=" },
    CocDiagnosticWarn,
    CocDiagnosticError,
    FileType,
    FileEncodeType,
    LineStatus,
  }

  local InactiveStatusline = {
    condition = function()
      return not conditions.is_active()
    end,
    {
      provider = ''
    }
  }

  local Statuslines = {
    hl = function()
      if conditions.is_active() then
        return {
          fg = utils.get_highlight("StatusLine").fg,
          bg = utils.get_highlight("StatusLine").bg,
        }
      else
        return {
          fg = utils.get_highlight("StatusLineNC").fg,
          bg = utils.get_highlight("StatusLineNC").bg,
        }
      end
    end,
    stop_at_first = true,
    InactiveStatusline, DefaultStatusline
  }

  require'heirline'.setup(Statuslines)
EOF
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char_list = ['|', '¦']
'''

[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_add = '''
  autocmd CmdlineEnter * ++once call s:wilder_init() | call wilder#main#start()

  " Also use Tab key as next_key
  cmap <Tab> <C-n>

  function! s:wilder_init() abort
    call wilder#setup({
          \ 'modes': [':'],
          \ 'next_key': '<C-n>',
          \ 'previous_key': '<C-p>',
          \ })
    call wilder#set_option('pipeline', [
          \   wilder#branch(
          \     wilder#cmdline_pipeline({
          \       'fuzzy': 1,
          \       'set_pcre2_pattern': has('nvim'),
          \     }),
          \     wilder#python_search_pipeline({
          \       'pattern': 'fuzzy',
          \     }),
          \   ),
          \ ])

    let l:highlighters = [
          \ wilder#pcre2_highlighter(),
          \ wilder#basic_highlighter(),
          \ ]
    call wilder#make_hl('WilderAccent', 'Pmenu', [{}, {}, {'foreground': '#DB8B33', 'bold': 1}])

    call wilder#set_option('renderer', wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
          \ 'winblend': &pumblend,
          \ 'border': 'rounded',
          \ 'highlighter': l:highlighters,
          \ 'highlights': {
          \   'accent': 'WilderAccent',
          \   'border': 'Normal',
          \ },
          \ })))
  endfunction
'''

# -------------------------------- color scheme --------------------------------

[[plugins]]
repo = 'ayu-theme/ayu-vim'
hook_add = '''
  set termguicolors
  let ayucolor = "dark"
'''

[[plugins]]
repo = 'fabi1cazenave/kalahari.vim'

[[plugins]]
repo = 'rakr/vim-one'
hook_add = '''
  let g:one_allow_italics = 1
'''

[[plugins]]
repo = 'hardcoreplayers/oceanic-material'
hook_add = '''
  let g:oceanic_material_allow_bold      = 1
  let g:oceanic_material_allow_italic    = 1
  let g:oceanic_material_allow_underline = 1
  let g:oceanic_material_allow_undercurl = 1
  let g:oceanic_material_allow_reverse   = 1
'''

# ------------------------------------ VCS ------------------------------------

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  nmap     <silent> <Space>hp <Plug>(GitGutterPreviewHunk)
  nmap     <silent> <Space>ha <Plug>(GitGutterStageHunk)
  nmap     <silent> <Space>hr <Plug>(GitGutterUndoHunk)
  nnoremap <silent> ]c        :<C-u>GitGutterNextHunk<CR>
  nnoremap <silent> [c        :<C-u>GitGutterPrevHunk<CR>

  let g:gitgutter_preview_win_floating    = 1
  let g:gitgutter_sign_removed            = '-'
  let g:gitgutter_sign_removed_first_line = '-'

  if has('nvim')
    let g:gitgutter_highlight_linenrs = 1
  endif
'''

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
hook_add = '''
  nnoremap <C-o> :TigOpenProjectRootDir<CR>
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
  let g:blamer_delay = 100
  nnoremap <silent><Space>b :<C-u>BlamerToggle<CR>
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
lazy = 1
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'
hook_add = '''
  nmap <silent><Leader>b <Plug>(git-messenger)
'''

[[plugins]]
repo = 'knsh14/vim-github-link'

# ------------------------------- language pack -------------------------------

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'neoclide/jsonc.vim'
on_ft = 'jsonc'

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = 'javascriptreact'

[[plugins]]
repo = 'zdharma-continuum/zinit-vim-syntax'
on_ft = 'zsh'

[[plugins]]
repo = 'tjdevries/coc-zsh'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# ------------------------------- other plugins -------------------------------


[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  vmap <Leader>o <Plug>(openbrowser-open)
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''
  let g:autodate_format="%Y/%m/%d %A %H:%M:%S"
'''

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
  let g:translator_target_lang = 'ja'
  let g:translator_source_lang = 'en'

  nmap <silent> <Leader>t <Plug>TranslateW
  vmap <silent> <Leader>t <Plug>TranslateWV
'''

[[plugins]]
repo = 'nnsnico/sepcomment.vim'
lazy = 1
on_cmd = 'SepComment'
hook_add = '''
  let g:sepcomment#length = 78
'''

[[plugins]]
repo = 'junegunn/goyo.vim'
lazy = 1
on_cmd = 'Goyo'

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'gyim/vim-boxdraw'

[[plugins]]
repo = 'glacambre/firenvim'
hook_post_update = '''
  call firenvim#install(0)
'''
