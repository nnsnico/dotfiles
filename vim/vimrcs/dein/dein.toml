[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 0
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'junegunn/fzf.vim'
if = '''has('nvim')'''
hook_add = '''
  nnoremap <silent> zf :Files<CR>
  nnoremap <silent> zg :GFiles?<CR>
  nnoremap <silent> zh :History<CR>
  nnoremap <silent> zb :Buffers<CR>

  " customize to open in horizontal
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit' }

  if has('nvim')
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }

    function! FloatingFZF()
      let buf = nvim_create_buf(v:false, v:true)
      call setbufvar(buf, '&signcolumn', 'no')

      let height = &lines / 3
      let width = float2nr(&columns - (&columns * 2 / 10))
      let col = float2nr((&columns - width) / 2)

      let opts = {
            \ 'relative': 'editor',
            \ 'row': 1,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height
            \ }

      call nvim_open_win(buf, v:true, opts)
    endfunction
  endif
'''

[[plugins]]
repo = '/usr/local/opt/fzf'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowHidden = 1
  let g:NERDTreeShowBookmarks = 0

  map <silent> <C-t> :NERDTreeToggle<CR>
  nmap <C-l> gt
  nmap <C-h> gT
  nnoremap <silent> <C-k> :NERDTreeFind<CR>
  nmap <silent> gs :split<CR>
  nmap <silent> gv :vsplit<CR>
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
  " 'Modified'  :pencil:
  " 'Staged'    :file plus:
  " 'Untracked' :fa-binoculars:
  " 'Renamed'   :mdi-rename_box:
  " 'Unmerged'  :oct-zap:
  " 'Deleted'   :mdi-delete_empty:
  " 'Dirty'     :mdi-sync:
  " 'Clean'     :oct-check:
  " 'Ignored'   :mdi-ghost:
  " 'Unknown'   :fa-question_circle:
  let g:NERDTreeIndicatorMapCustom = {
      \ 'Modified'  : "\uFB4E", 
      \ 'Staged'    : "\uFC50", 
      \ 'Untracked' : "\uF708", 
      \ 'Renamed'   : "\uF954", 
      \ 'Unmerged'  : "\u26A1", 
      \ 'Deleted'   : "\uFBCA", 
      \ 'Dirty'     : "\uF9E5", 
      \ 'Clean'     : "\uF42E", 
      \ 'Ignored'   : "\uF79F", 
      \ 'Unknown'   : "\uF4A3"  
      \ }
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'severin-lemaignan/vim-minimap'

[[plugins]]
repo = 'ayu-theme/ayu-vim'
hook_add = '''
  set termguicolors
  let ayucolor="dark"
'''

[[plugins]]
repo = 'tyrannicaltoucan/vim-deep-space'

[[plugins]]
repo = 'romainl/Apprentice'

[[plugins]]
repo = 'fabi1cazenave/kalahari.vim'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'chase/focuspoint-vim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_theme='bubblegum'

  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#left_sep = "\uE0B8"
  let g:airline#extensions#tabline#left_alt_sep = "\uE0B9"
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

  let g:airline_left_sep = "\uE0B8"
  let g:airline_right_sep = "\uE0BE"
  let g:airline_section_b = '(´ワ｀ )'
  " show filename only (defualt relative path)
  let g:airline_section_c = '%t'
  let g:airline_section_z = '%L lines %p%%'

  " for coc-nvim
  function! StatusDiagnostic() abort
    let info = get(b:, 'coc_diagnostic_info', {})
    if empty(info) | return '' | endif
    let msgs = []
    if get(info, 'error', 0)
      call add(msgs, "\uF1E2" . info['error'])
    endif
    if get(info, 'warning', 0)
      call add(msgs, "\uE230" . info['warning'])
    endif
    return join(msgs, ''). '' . get(g:, 'coc_status', '')
  endfunction

  let g:airline#extensions#coc#enabled = 1
  let g:airline_section_warning = "%{StatusDiagnostic()}"
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  nmap <Space>hp <Plug>(GitGutterPreviewHunk)
  nmap <Space>ha <Plug>(GitGutterStageHunk)
  nmap <Space>hr <Plug>(GitGutterUndoHunk)

  let g:gitgutter_preview_win_floating = 1
  let g:gitgutter_sign_removed = '-'
  let g:gitgutter_sign_removed_first_line = '-'
  let g:gitgutter_preview_win_floating = 1
  if has('nvim')
    let g:gitgutter_highlight_linenrs = 1
  endif
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''
  let autodate_format="%Y/%m/%d %A %H:%M:%S"
'''

[[plugins]]
repo = 'skanehira/translate.vim'

[[plugins]]
repo = 'glacambre/firenvim'
hook_post_update = '''
  let g:firenvim_config = {
      \ 'localSettings': {
          \ '.*': {
              \ 'selector': '',
              \ 'priority': 0,
          \ },
          \ 'github\.com': {
              \ 'selector': 'textarea',
              \ 'priority': 1,
          \ },
      \ }
  \ }

  function('firenvim#install')
'''
