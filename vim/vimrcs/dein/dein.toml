# ------------------------------- basic plugins -------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'

[[plugins]]
lazy = 1
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
lazy = 1
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 0
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

# -------------------------------- fuzzy finder --------------------------------

[[plugins]]
repo = 'junegunn/fzf.vim'
if = '''has('nvim')'''
depends = ['fzf']
hook_add = '''
  " customize to open in horizontal
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

  if has('nvim')
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }

    function! FloatingFZF()
      let buf = nvim_create_buf(v:false, v:true)
      call setbufvar(buf, '&signcolumn', 'no')

      let height = &lines / 3
      let width = float2nr(&columns - (&columns * 2 / 10))
      let col = float2nr((&columns - width) / 2)

      let opts = {
            \ 'relative': 'editor',
            \ 'row': 1,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height
            \ }

      call nvim_open_win(buf, v:true, opts)
    endfunction
  endif
'''

[[plugins]]
repo = 'junegunn/fzf'
lazy = 1
hook_done_update = '''
:<C-u>call fzf#install()<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 0
'''

[[plugins]]
repo = 'liuchengxu/vim-clap'
build = ':Clap install-binary'
hook_add = '''
  let g:clap_theme = 'material_design_dark'
  let g:clap_current_selection_sign = {
    \ 'text': "\uF0A4",
    \ 'texthl': "WarningMsg",
    \ 'linehl': "ClapCurrentSelection"
    \ }

  let height = &lines / 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)
  let g:clap_layout = {
    \ 'relative': 'editor',
    \ }
  let g:clap_open_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

  " open nerdtree if no specified arguments
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in")
    \ | :Clap files --hidden
    \ | endif

  " custom commands likes `fzf.vim`
  nnoremap <silent> <Plug>ClapFiles      :<C-u>Clap files --hidden<CR>
  nnoremap <silent> <Plug>ClapBuffers    :<C-u>Clap buffers<CR>
  nnoremap <silent> <Plug>ClapBLine      :<C-u>Clap blines<CR>
  nnoremap <silent> <Plug>ClapGFiles     :<C-u>Clap git_diff_files<CR>
  nnoremap <silent> <Plug>ClapGrep       :<C-u>Clap grep<CR>
  nnoremap <silent> <Plug>ClapGrepWord   :<C-u>Clap grep ++query=<cword><CR>
  vnoremap <silent> <Plug>ClapGrepSelect :<C-u>Clap grep ++query=@visual<CR>
  nnoremap <silent> <Plug>ClapWindows    :<C-u>Clap windows<CR>
  nnoremap <silent> <Plug>ClapColors     :<C-u>Clap colors<CR>

  nmap <silent> zf <Plug>ClapFiles
  nmap <silent> zb <Plug>ClapBuffers
  nmap <silent> zl <Plug>ClapBLine
  nmap <silent> zg <Plug>ClapGFiles
  nmap <silent> zr <Plug>ClapGrep
  nmap <silent> zv <Plug>ClapGrepWord
  vmap <silent> zv <Plug>ClapGrepSelect
  nmap <silent> zw <Plug>ClapWindows
  nmap <silent> zc <Plug>ClapColors
'''

# ------------------------------ nerdtree plugins ------------------------------

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowHidden    = 1
  let g:NERDTreeShowBookmarks = 0

  noremap  <silent> <C-t>      :<C-u>NERDTreeToggle<CR>
  nnoremap <silent> <C-p>      :<C-u>NERDTreeFind<CR>
  nnoremap <silent> <C-w>t     :<C-u>NERDTreeFocus<CR>
  nnoremap <silent> <C-w><C-t> :<C-u>NERDTreeFocus<CR>
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# ---------------------------- manipulation utility ----------------------------

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'severin-lemaignan/vim-minimap'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1

  " disable in nerdtree
  let g:rainbow_conf = {
    \ 'separately': {
    \   'nerdtree': 0
    \ }
  \ }
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
  let g:comfortable_motion_friction = 200.0
  let g:comfortable_motion_air_drag = 0.0
'''

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
  call repeat#set("<Space><CR>", v:count1)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  let g:multi_cursor_select_all_word_key = '<C-q>'
'''

[[plugins]]
repo = 'pechorin/any-jump.vim'
hook_add = '''
  let g:any_jump_list_numbers     = 1
  let g:any_jump_grouping_enabled = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

# ------------------------------- visual utility -------------------------------

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " let g:airline_theme='bubblegum'

  let g:airline_left_sep  = "\uE0B8"
  let g:airline_right_sep = "\uE0BE"

  " show filename only (defualt relative path)
  let g:airline_section_c = '%t'
  let g:airline_section_z = '%L lines %p%%'

  let g:airline_extensions = [
    \ 'tabline',
    \ 'coc',
    \ 'hunks',
    \ 'whitespace',
    \ 'fugitiveline'
    \ ]

  let g:airline#extensions#coc#error_symbol    = "\uF1E2"
  let g:airline#extensions#coc#warning_symbol  = "\uE230"
  let g:airline#extensions#coc#stl_format_err  = '%E{[%e(#%fe)]}'
  let g:airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

  let g:airline#extensions#tabline#left_sep     = "\uE0B8"
  let g:airline#extensions#tabline#left_alt_sep = "\uE0B9"
  let g:airline#extensions#tabline#formatter    = 'unique_tail_improved'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char_list = ['|', 'Â¦']
  let g:indentLine_setColors = 0
'''

# -------------------------------- color scheme --------------------------------

[[plugins]]
repo = 'ayu-theme/ayu-vim'
hook_add = '''
  set termguicolors
  let ayucolor = "dark"
'''

[[plugins]]
repo = 'tyrannicaltoucan/vim-deep-space'

[[plugins]]
repo = 'romainl/Apprentice'

[[plugins]]
repo = 'fabi1cazenave/kalahari.vim'

[[plugins]]
repo = 'chase/focuspoint-vim'

[[plugins]]
repo = 'rakr/vim-one'
hook_add = '''
  let g:one_allow_italics = 1
'''

# ------------------------------------ VCS ------------------------------------

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  nmap     <silent> <Space>hp <Plug>(GitGutterPreviewHunk)
  nmap     <silent> <Space>ha <Plug>(GitGutterStageHunk)
  nmap     <silent> <Space>hr <Plug>(GitGutterUndoHunk)
  nnoremap <silent> ]c        :<C-u>GitGutterNextHunk<CR>zz
  nnoremap <silent> [c        :<C-u>GitGutterPrevHunk<CR>zz

  let g:gitgutter_preview_win_floating    = 1
  let g:gitgutter_sign_removed            = '-'
  let g:gitgutter_sign_removed_first_line = '-'

  if has('nvim')
    let g:gitgutter_highlight_linenrs = 1
  endif
'''

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
hook_add = '''
  nnoremap <C-o> :TigOpenProjectRootDir<CR>
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
  let g:blamer_delay = 100
  nnoremap <silent><Space>b :<C-u>BlamerToggle<CR>
'''

# ------------------------------- other plugins -------------------------------

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''
  let autodate_format="%Y/%m/%d %A %H:%M:%S"
'''

[[plugins]]
if = '''! has('nvim')'''
repo = 'skanehira/translate.vim'

[[plugins]]
repo = 'nnsnico/sepcomment.vim'
hook_add = '''
  let g:sepcomment#length = 78
'''

[[plugins]]
repo = 'junegunn/goyo.vim'
