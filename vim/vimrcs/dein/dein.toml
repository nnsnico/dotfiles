# ------------------------------- basic plugins -------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token = system('cat ' . expand('~/dotfiles/yabai_yatsu.txt') . " | awk -F ': ' '/github_api/ {print $2}'")
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
lazy = 1

[[plugins]]
repo = 'Shougo/vimproc.vim'
lazy = 1
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
if = '''has('nvim')'''

# -------------------------------- fuzzy finder --------------------------------

[[plugins]]
repo = 'junegunn/fzf.vim'
if = '''has('nvim')'''
depends = ['fzf']
hook_add = '''
  " customize to open in horizontal
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

  if has('nvim')
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }

    function! FloatingFZF()
      let buf = nvim_create_buf(v:false, v:true)
      call setbufvar(buf, '&signcolumn', 'no')

      let height = &lines / 3
      let width = float2nr(&columns - (&columns * 2 / 10))
      let col = float2nr((&columns - width) / 2)

      let opts = {
            \ 'relative': 'editor',
            \ 'row': 1,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height
            \ }

      call nvim_open_win(buf, v:true, opts)
    endfunction
  endif
'''

[[plugins]]
repo = 'junegunn/fzf'
lazy = 1
hook_done_update = '''
:<C-u>call fzf#install()<CR>
'''

[[plugins]]
repo = 'liuchengxu/vim-clap'
depends = ["vim-devicons"]
build = ':Clap install-binary'
hook_add = '''
  let g:clap_theme = 'material_design_dark'
  let g:clap_current_selection_sign = {
    \ 'text': "\uF0A4",
    \ 'texthl': "WarningMsg",
    \ 'linehl': "ClapCurrentSelection"
    \ }

  let height = &lines / 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)
  let g:clap_layout = {
    \ 'relative': 'editor',
    \ }
  let g:clap_open_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

  " open nerdtree if no specified arguments
  autocmd StdinReadPre * let s:std_in = 1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in")
    \ | :Clap files --hidden
    \ | endif

  " custom commands likes `fzf.vim`
  nnoremap <silent> <Plug>ClapFiles      :<C-u>Clap files --hidden<CR>
  nnoremap <silent> <Plug>ClapBuffers    :<C-u>Clap buffers<CR>
  nnoremap <silent> <Plug>ClapBLine      :<C-u>Clap blines<CR>
  nnoremap <silent> <Plug>ClapGFiles     :<C-u>Clap git_diff_files<CR>
  nnoremap <silent> <Plug>ClapGrep       :<C-u>Clap grep<CR>
  nnoremap <silent> <Plug>ClapGrepWord   :<C-u>Clap grep ++query=<cword><CR>
  vnoremap <silent> <Plug>ClapGrepSelect :<C-u>Clap grep ++query=@visual<CR>
  nnoremap <silent> <Plug>ClapWindows    :<C-u>Clap windows<CR>
  nnoremap <silent> <Plug>ClapColors     :<C-u>Clap colors<CR>
  nnoremap <silent> <Plug>ClapCommand    :<C-u>Clap command<CR>

  nmap <silent> zf         <Plug>ClapFiles
  nmap <silent> zb         <Plug>ClapBuffers
  nmap <silent> zl         <Plug>ClapBLine
  nmap <silent> zg         <Plug>ClapGFiles
  nmap <silent> zr         <Plug>ClapGrep
  nmap <silent> zv         <Plug>ClapGrepWord
  vmap <silent> zv         <Plug>ClapGrepSelect
  nmap <silent> zw         <Plug>ClapWindows
  nmap <silent> zc         <Plug>ClapColors
  nmap <silent> <Leader>zc <Plug>ClapCommand
'''

# ------------------------------- filer plugins --------------------------------

[[plugins]]
repo = 'ryanoasis/vim-devicons'
lazy = 1

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
if = '''has('nvim')'''
depends = ["nvim-web-devicons"]
hook_add = '''
  let g:nvim_tree_disable_default_keybindings = 1
  nnoremap <silent><C-t> :<C-u>NvimTreeFindFile<CR>

lua <<EOF
  local tree_callback = require'nvim-tree.config'.nvim_tree_callback
  vim.g.nvim_tree_bindings = {
    { key = {"<CR>", "o"}, cb = tree_callback("edit") },
    { key = "<C-t>",       cb = tree_callback("close") },
    { key = "x",           cb = tree_callback("close_node") },
    { key = "K",           cb = tree_callback("first_sibling") },
    { key = "J",           cb = tree_callback("last_sibling") },
    { key = "I",           cb = tree_callback("toggle_ignored") },
    { key = "H",           cb = tree_callback("toggle_dotfiles") },
    { key = "R",           cb = tree_callback("refresh") },
    { key = "i",           cb = tree_callback("split") },
    { key = "s",           cb = tree_callback("vsplit") },
    { key = "go",          cb = tree_callback("preview") },
    { key = "[c",          cb = tree_callback("prev_git_item") },
    { key = "]c",          cb = tree_callback("next_git_item") },
    { key = "N",           cb = tree_callback("create") },
    { key = "r",           cb = tree_callback("rename") },
    { key = "m",           cb = tree_callback("cut") },
    { key = "yy",          cb = tree_callback("copy") },
    { key = "YY",          cb = tree_callback("copy_path") },
    { key = "Yy",          cb = tree_callback("copy_absolute_path") },
    { key = "dd",          cb = tree_callback("remove") },
    { key = "g?",          cb = tree_callback("toggle_help") },
  }
EOF
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
lazy = 1

# ---------------------------- manipulation utility ----------------------------

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1

  " disable in nerdtree
  let g:rainbow_conf = {
    \ 'separately': {
    \   'nerdtree': 0
    \ }
  \ }
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
  call repeat#set("<Space><CR>", v:count1)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'mg979/vim-visual-multi'

[[plugins]]
repo = 'pechorin/any-jump.vim'
hook_add = '''
  let g:any_jump_list_numbers     = 1
  let g:any_jump_grouping_enabled = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  autocmd User EasyMotionPromptBegin silent! CocDisable
  autocmd User EasyMotionPromptEnd silent! CocEnable

  map <Leader> <Plug>(easymotion-prefix)
'''

[[plugins]]
repo = 'psliwka/vim-smoothie'

# ------------------------------- visual utility -------------------------------

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_extensions = [
    \ 'tabline',
    \ 'coc',
    \ 'hunks',
    \ 'branch',
    \ 'whitespace',
    \ 'fugitiveline'
    \ ]

  let nerdfont_settings = {
    \ 'g:airline_left_sep': "\uE0B8",
    \ 'g:airline_right_sep': "\uE0BE",
    \ 'g:airline#extensions#coc#error_symbol': "\uF1E2",
    \ 'g:airline#extensions#coc#warning_symbol': "\uE230",
    \ 'g:airline#extensions#tabline#left_sep': "\uE0B8",
    \ 'g:airline#extensions#tabline#left_alt_sep': "\uE0B9"
    \ }

  if has('nvim')
    " if nvim it should add a space after Unicode
    let nerdfont_settings = map(nerdfont_settings, {_, val -> val . ' '})
  endif

  " set devicons
  for [var, icon] in items(nerdfont_settings)
    let {var} = icon
  endfor

  " show filename only (defualt: relative path)
  let g:airline_section_c = '%t'
  let g:airline_section_z = 'max-lines: %L(%p%%)'

  let g:airline#extensions#coc#stl_format_err  = '%E{[%e(#%fe)]}'
  let g:airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char_list = ['|', 'Â¦']
'''

# -------------------------------- color scheme --------------------------------

[[plugins]]
repo = 'ayu-theme/ayu-vim'
hook_add = '''
  set termguicolors
  let ayucolor = "dark"
'''

[[plugins]]
repo = 'fabi1cazenave/kalahari.vim'

[[plugins]]
repo = 'rakr/vim-one'
hook_add = '''
  let g:one_allow_italics = 1
'''

[[plugins]]
repo = 'hardcoreplayers/oceanic-material'
hook_add = '''
  let g:oceanic_material_allow_bold      = 1
  let g:oceanic_material_allow_italic    = 1
  let g:oceanic_material_allow_underline = 1
  let g:oceanic_material_allow_undercurl = 1
  let g:oceanic_material_allow_reverse   = 1
'''

# ------------------------------------ VCS ------------------------------------

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  nmap     <silent> <Space>hp <Plug>(GitGutterPreviewHunk)
  nmap     <silent> <Space>ha <Plug>(GitGutterStageHunk)
  nmap     <silent> <Space>hr <Plug>(GitGutterUndoHunk)
  nnoremap <silent> ]c        :<C-u>GitGutterNextHunk<CR>
  nnoremap <silent> [c        :<C-u>GitGutterPrevHunk<CR>

  let g:gitgutter_preview_win_floating    = 1
  let g:gitgutter_sign_removed            = '-'
  let g:gitgutter_sign_removed_first_line = '-'

  if has('nvim')
    let g:gitgutter_highlight_linenrs = 1
  endif
'''

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
hook_add = '''
  nnoremap <C-o> :TigOpenProjectRootDir<CR>
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
  let g:blamer_delay = 100
  nnoremap <silent><Space>b :<C-u>BlamerToggle<CR>
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
lazy = 1
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'
hook_add = '''
  nmap <silent><Leader>b <Plug>(git-messenger)
'''

[[plugins]]
repo = 'knsh14/vim-github-link'

# ------------------------------- other plugins -------------------------------

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''
  let g:autodate_format="%Y/%m/%d %A %H:%M:%S"
'''

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
  let g:translator_target_lang = 'ja'
  let g:translator_source_lang = 'en'

  nmap <silent> <Leader>t <Plug>TranslateW
  vmap <silent> <Leader>t <Plug>TranslateWV
'''

[[plugins]]
repo = 'nnsnico/sepcomment.vim'
hook_add = '''
  let g:sepcomment#length = 78
'''

[[plugins]]
repo = 'junegunn/goyo.vim'

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'gyim/vim-boxdraw'
