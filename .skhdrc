# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ----------------------------------- window -----------------------------------

# focus window
ctrl + cmd - h : yabai -m window --focus west
ctrl + cmd - j : yabai -m window --focus south
ctrl + cmd - k : yabai -m window --focus north
ctrl + cmd - l : yabai -m window --focus east

# move to next space
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# toggle window zoom
ctrl + cmd - d : yabai -m window --toggle zoom-parent
ctrl + cmd - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
ctrl + cmd - e : yabai -m window --toggle split

# float / unfloat window and center on screen
ctrl + cmd - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, border and picture-in-picture
ctrl + cmd - s : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle border;\
          yabai -m window --toggle pip

# ----------------------------------- stack -----------------------------------

# move stack
ctrl + cmd - 0x2F : yabai -m window --focus stack.next || yabai -m window --focus stack.first  # 0x2F == . (dot)
ctrl + cmd - m    : yabai -m window --focus stack.prev || yabai -m window --focus stack.last
# add to stack with next action
ctrl + cmd - a    : yabai -m window --insert stack

# ----------------------------------- space -----------------------------------

# send window to desktop and follow focus
shift + cmd - n : yabai -m window --space next; yabai -m space --focus next
shift + cmd - p : yabai -m window --space prev; yabai -m space --focus prev

# focus space
ctrl + cmd - n : yabai -m space --focus next
ctrl + cmd - p : yabai -m space --focus prev

# auto format windows
ctrl + cmd - i : yabai -m space --balance

# ---------------------------------- display ----------------------------------

ctrl + cmd - u : yabai -m display --focus prev
ctrl + cmd - o : yabai -m display --focus next

# ----------------------------------- other -----------------------------------

ctrl + shift + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
